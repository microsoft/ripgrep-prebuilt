parameters:
  target: ''
  rust_version: '1.76.0'
  repo: ''
  tag: ''

steps:
- script: |
    set -ex
    REPO=`[ "${{ parameters.repo }}" ] &&  echo ${{ parameters.repo }} || echo $(node -p "require('./config.json').ripgrepRepo")`
    TREEISH=`[ "${{ parameters.tag }}" ] && echo ${{ parameters.tag }} || echo $(node -p "require('./config.json').ripgrepTag")`
    git clone https://github.com/${REPO}.git
    cd ripgrep
    git checkout $TREEISH
  displayName: Clone Ripgrep

- script: |
    set -ex
    for patch in $(node -p "require('../config.json').patches.join(' ')"); do
      git apply --ignore-whitespace --ignore-space-change ../patches/$patch
    done
  workingDirectory: ripgrep
  displayName: Apply patches
  condition: succeeded()

- script: build/install.sh
  displayName: Install Rust
  env:
    RUST_VERSION: ${{ parameters.rust_version }}
    TARGET: ${{ parameters.target }}

- script: ../build/build.sh
  displayName: Build
  workingDirectory: ripgrep
  env:
    TARGET: ${{ parameters.target }}

- script: ../build/package.sh
  displayName: Package
  workingDirectory: ripgrep
  env:
    TARGET: ${{ parameters.target }}
    OUT_DIR: $(Build.ArtifactStagingDirectory)
  condition: succeeded()

- script: mkdir $(Build.ArtifactStagingDirectory)/_manifest
  displayName: Create SBOM drop folder

- task: 1ES.PublishPipelineArtifact@1
  displayName: 'Publish Pipeline Artifact'
  inputs:
    targetPath: $(Build.ArtifactStagingDirectory)
    artifactName: $(Name)
    sbomBuildDropPath: $(Build.ArtifactStagingDirectory)
    sbomBuildComponentPath: $(Build.SourcesDirectory)/ripgrep/target/${{ parameters.target }}/release
  condition: succeeded()
