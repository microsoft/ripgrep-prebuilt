parameters:
  target: ''
  rust_version: '1.76.0'
  repo: ''
  tag: ''
  use_mariner: false

steps:
- script: |
    set -ex
    REPO=`[ "${{ parameters.repo }}" ] &&  echo ${{ parameters.repo }} || echo $(node -p "require('./config.json').ripgrepRepo")`
    TREEISH=`[ "${{ parameters.tag }}" ] && echo ${{ parameters.tag }} || echo $(node -p "require('./config.json').ripgrepTag")`
    git clone https://github.com/${REPO}.git
    cd ripgrep
    git checkout $TREEISH
  displayName: Clone Ripgrep

- script: |
    set -ex
    for patch in $(node -p "require('../config-linux.json').patches.join(' ')"); do
      git apply --ignore-whitespace --ignore-space-change ../patches/$patch
    done
  workingDirectory: ripgrep
  displayName: Apply patches
  condition: succeeded()

- ${{ if eq(parameters.use_mariner, true) }}:
  - task: DockerInstaller@0
    inputs:
      dockerVersion: '27.0.3'

  - task: Bash@3
    displayName: Build
    env:
      CURRENTDIR: $(Build.SourcesDirectory)
      DOCKERCMD: >
        echo $(pwd) &&
        apk add --no-cache musl-dev lld file &&
        ./build/install.sh &&
        cd ripgrep && ../build/build.sh
    inputs:
      targetType: 'inline'
      script: |
          docker run --pull always --privileged --rm --volume "${CURRENTDIR}":/app --workdir /app --env RUST_VERSION="${{ parameters.rust_version }}" --env USE_MARINER="${{ parameters.use_mariner }}" --env TARGET="${{ parameters.target }}" --env OUT_DIR="$(Build.ArtifactStagingDirectory)" mcr.microsoft.com/devcontainers/base:alpine-3.19 /bin/sh -c "${DOCKERCMD}"
- ${{ else }}:
  - script: build/install.sh
    displayName: Install Rust
    env:
      RUST_VERSION: ${{ parameters.rust_version }}
      TARGET: ${{ parameters.target }}

  - script: ../build/build.sh
    displayName: Build
    workingDirectory: ripgrep
    env:
      TARGET: ${{ parameters.target }}

- script: ../build/package.sh
  displayName: Package
  workingDirectory: ripgrep
  env:
    TARGET: ${{ parameters.target }}
    OUT_DIR: $(Build.ArtifactStagingDirectory)
  condition: succeeded()

- task: 1ES.PublishPipelineArtifact@1
  displayName: 'Publish Pipeline Artifact'
  inputs:
    targetPath: $(Build.ArtifactStagingDirectory)
    artifactName: $(Name)
    sbomBuildDropPath: $(Build.ArtifactStagingDirectory)
    sbomBuildComponentPath: $(Build.SourcesDirectory)/ripgrep
    sbomPackageName: "ripgrep-prebuilt (${{ parameters.target }})"
  condition: succeeded()
