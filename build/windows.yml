# Based on https://github.com/BurntSushi/ripgrep/blob/master/appveyor.yml

parameters:
  target: ''
  rust_version: 'stable'

steps:
- pwsh: |
    if(!(Test-Path ".config\tsaoptions.json")) {
      $tsaOptions = @'
      {
        "codebaseName": "devdiv_microsoft_vscode_ripgrep_prebuilt",
        "instanceUrl": "https://devdiv.visualstudio.com/defaultcollection",
        "projectName": "DevDiv",
        "areaPath": "DevDiv\\VS Code (compliance tracking only)\\Visual Studio Code NPM Packages",
        "notificationAliases": [
          "stbatt@microsoft.com",
          "lszomoru@microsoft.com"
        ]
      }
      '@

      New-Item -Path ".config\tsaoptions.json" -ItemType File -Value $tsaOptions -Force
    }
    Get-Content -Path ".config\tsaoptions.json"
  displayName: ðŸ“¤ Generate tsaoptions.json

- powershell: |
    gci env:*
    $REPO=node -p "require('./config.json').ripgrepRepo"
    $TREEISH=node -p "require('./config.json').ripgrepTag"
    git clone https://github.com/${REPO}.git
    cd ripgrep
    git checkout $TREEISH
  displayName: Clone ripgrep

- powershell: |
    echo $env:reason
    echo $BUILD_SOURCEVERSION
    Invoke-WebRequest https://win.rustup.rs -UseBasicParsing -OutFile rustup-init.exe
    .\rustup-init.exe -y
    $env:PATH+=";C:\Users\appveyor\.cargo\bin"

    rustup default $env:RUST_VERSION
    rustc -V
    cargo -V

    rustup target add $env:TARGET
  env:
    RUST_VERSION: ${{ parameters.rust_version }}
    TARGET: ${{ parameters.target }}
    reason: variables['Build.Reason']
  displayName: Install Rust

- powershell: |
    $env:RUSTFLAGS='-C target-feature=+crt-static'
    cargo build --release --target $env:TARGET --features pcre2

    cargo test --target "$TARGET" --release --verbose --all --features 'pcre2'

    pushd ..
    $this_tag=git tag -l --contains HEAD
    popd

    $name="ripgrep-${this_tag}-${env:TARGET}.zip"
    dir
    dir .\target
    dir .\target\${env:TARGET}\release\rg.exe
    Compress-Archive -Update -Path .\target\${env:TARGET}\release\rg.exe -DestinationPath $env:BUILD_ARTIFACTSTAGINGDIRECTORY\$name
    echo "##vso[task.setvariable variable=Name]$name"
  displayName: Build
  workingDirectory: ripgrep
  env:
    TARGET: ${{ parameters.target }}
  condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/v'))

- task: APIScan@2
  inputs:
    softwareFolder: ripgrep
    softwareName: 'ripgrep'
    softwareVersionNum: '13'
    isLargeApp: false
    toolVersion: 'Latest'
  displayName: Run APIScan
  condition: succeeded()
  env:
    AzureServicesAuthConnectionString: $(apiscan-connectionstring)

- task: PublishSecurityAnalysisLogs@3
  displayName: Publish security logs
  inputs:
    ArtifactName: 'CodeAnalysisLogs'
    ArtifactType: 'Container'
    AllTools: true
    ToolLogsNotFoundAction: 'Standard'

# TSA Upload
- task: securedevelopmentteam.vss-secure-development-tools.build-task-uploadtotsa.TSAUpload@2
  displayName: ðŸ”’ TSA Upload
  continueOnError: true
  inputs:
    GdnPublishTsaConfigFile: $(Build.SourcesDirectory)/.config/tsaoptions.json
    GdnPublishTsaOnboard: True

- task: PublishPipelineArtifact@0
  displayName: 'Publish Pipeline Artifact'
  inputs:
    artifactName: $(Name)
    targetPath: $(Build.ArtifactStagingDirectory)/$(Name)
  condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/v'))
