jobs:
- job: linux_64
  pool:
    vmImage: 'ubuntu-latest'
  steps:
    - template: linux.yml
      parameters:
        target: x86_64-unknown-linux-musl
- job: linux_32
  pool:
    vmImage: 'ubuntu-latest'
  steps:
    - template: linux.yml
      parameters:
        target: i686-unknown-linux-musl
- job: linux_arm
  pool:
    vmImage: 'ubuntu-latest'
  container:
      image: mcr.microsoft.com/mirror/docker/library/ubuntu:18.04
  steps:
    - script: |
        sudo sed -i "s/^deb/deb [arch=amd64,i386]/g" /etc/apt/sources.list
        echo "deb [arch=arm64,armhf] http://ports.ubuntu.com/ bionic main universe multiverse restricted" | sudo tee -a /etc/apt/sources.list
        echo "deb [arch=arm64,armhf] http://ports.ubuntu.com/ bionic-security main universe multiverse restricted" | sudo tee -a /etc/apt/sources.list
        echo "deb [arch=arm64,armhf] http://ports.ubuntu.com/ bionic-updates main universe multiverse restricted" | sudo tee -a /etc/apt/sources.list
        sudo dpkg --add-architecture armhf
        sudo apt-get update && sudo apt-get install -y --no-install-recommends \
          gcc-8-arm-linux-gnueabihf \
          g++-8-arm-linux-gnueabihf \
          binutils-arm-linux-gnueabihf \
          build-essential \
          git \
          pkg-config \
          fakeroot \
          rpm \
          sudo \
          apt-transport-https \
          ca-certificates \
          libx11-dev:armhf \
          libx11-xcb-dev:armhf \
          libxkbfile-dev:armhf \
          libsecret-1-dev:armhf \
          curl \
          gnupg \
          unzip
      displayName: Install packages in docker image
    - template: linux.yml
      parameters:
        target: arm-unknown-linux-gnueabihf
- job: linux_aarch64
  pool:
    vmImage: 'ubuntu-latest'
  steps:
    - template: linux.yml
      parameters:
        target: aarch64-unknown-linux-gnu
- job: linux_aarch64_musl
  pool:
    vmImage: 'ubuntu-latest'
  steps:
    - template: linux.yml
      parameters:
        target: aarch64-unknown-linux-musl
- job: macOS
  pool:
    vmImage: macOS-latest
  steps:
    - template: linux.yml
      parameters:
        target: x86_64-apple-darwin
- job: macOS_arm64
  pool:
    vmImage: macOS-latest
  steps:
    - template: linux.yml
      parameters:
        target: aarch64-apple-darwin
- job: win_64
  pool:
    vmImage: windows-2022
  steps:
    - template: windows.yml
      parameters:
        target: x86_64-pc-windows-msvc
- job: win_32
  pool:
    vmImage: windows-2022
  steps:
    - template: windows.yml
      parameters:
        target: i686-pc-windows-msvc
- job: win_arm64
  pool:
    vmImage: windows-2022
  steps:
    - template: windows.yml
      parameters:
        target: aarch64-pc-windows-msvc
- job: ppc64le
  pool:
    vmImage: 'ubuntu-latest'
  steps:
    - template: linux.yml
      parameters:
        target: powerpc64le-unknown-linux-gnu
- job: s390x
  pool:
    vmImage: 'ubuntu-latest'
  steps:
    - template: linux.yml
      parameters:
        target: s390x-unknown-linux-gnu
- job: publish
  pool:
    vmImage: 'ubuntu-latest'
  condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/v'))
  dependsOn:
  - linux_64
  - linux_32
  - linux_arm
  - linux_aarch64
  - linux_aarch64_musl
  - macOS
  - macOS_arm64
  - win_64
  - win_32
  - win_arm64
  - ppc64le
  - s390x
  steps:
    - template: publish.yml

trigger:
  branches:
   include:
   - main
  tags:
    include:
    - v*
